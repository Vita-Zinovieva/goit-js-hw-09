{"mappings":"oeAAA,IAAAA,EAAAC,EAAA,SAEA,MAAMC,EAAUC,SAASC,cAAc,SAiBvB,SAAPC,EAAcC,EAAUC,GAC/B,MAAMC,EAAM,CAAEC,SAAAH,EAAUI,MAAAH,GAE4B,OAA7C,IAAII,SAAQ,CAACC,EAASC,KAE3B,MAAMC,EAAgBC,KAAKC,SAAW,GACpCC,YAAW,KACLH,EACFF,EAAQJ,GAG8CK,EAA/CL,EAAI,GAEbD,EAAO,IAEZW,MAAK,EAACT,SAAEA,EAAQC,MAAEA,MACjBV,EAAAmB,OAAOC,QAAQ,uBAAqBX,QAAiBC,MAAU,IAGhEW,OAAM,EAACZ,SAAEA,EAAQC,MAAEA,MAClBV,EAAAmB,OAAOG,QAAQ,sBAAoBb,QAAeC,MAAU,G,CApChER,EAAQqB,iBAAiB,SAGsD,SAA5DC,GACjBA,EAAEC,iBAC8B,IAA5BC,EAASC,OAAOzB,EAAQwB,OAAOE,OAC/BlB,EAAQiB,OAAOzB,EAAQQ,MAAMkB,OAC7BC,EAAOF,OAAOzB,EAAQ2B,KAAKD,OAE/B,IAAK,IAAIE,EAAI,EAAGA,GAAKJ,EAAQI,GAAK,EAAG,CAEjCzB,EAAcyB,EADApB,EAAQmB,EAAOC,E","sources":["src/js/03-promises.js"],"sourcesContent":["import { Notify } from 'notiflix/build/notiflix-notify-aio';\n\nconst formRef = document.querySelector('.form');\nformRef.addEventListener('click', newCreate);\n\n //створюэмо функцію в якій виконується ітерація по amount, вираховується час затримки і викликається  createPromise.\nfunction newCreate(e) {\n  e.preventDefault();                                     //відміна дії браузера по замовчуванню\n  let amount = Number(formRef.amount.value);              //приводимо введенні дані до числа\n  let delay = Number(formRef.delay.value);\n  let step = Number(formRef.step.value);\n  \n  for (let i = 1; i <= amount; i += 1) {                  \n    let timeDelay = delay + step * i;\n      createPromise(i, timeDelay)\n    }\n}; \n\n//функція ззавдання\nfunction createPromise(position, delay) {   \n  const obj = { position, delay };                       //ствроюєм об'єкт який буде значенням промісів з властивостями (position,delay) \n                    \n  return new Promise((resolve, reject) => {            //обгортаємо функцію в проміс  \n    \n    const shouldResolve = Math.random() > 0.3;\n      setTimeout(() => {                                //записуємо метод setTimeout() щоб запуск функції був після виконання промісу\n        if (shouldResolve) {\n          resolve(obj);                                  //якщо операція успішна(resolve)передаєм їй номер промісу (position), що створюється,\n                                                          // і затримку, враховуючи першу затримку (delay), введену користувачем, і крок (step).\n        } else {                                          //в разі помилки(reject) те ж саме (щоб resolve, delay повернулись в повідомленні)\n          reject(obj);\n        }\n      },delay );\n  })\n  .then(({ position, delay }) => {\n    Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`); \n    \n  })\n  .catch(({ position, delay }) => {\n    Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n    \n  }) \n};  \n\n"],"names":["$iQIUW","parcelRequire","$47d4ff9957288465$var$formRef","document","querySelector","$47d4ff9957288465$var$createPromise","position1","delay1","obj","position","delay","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","then","Notify","success","catch","failure","addEventListener","e","preventDefault","amount","Number","value","step","i"],"version":3,"file":"03-promises.bd93352b.js.map"}